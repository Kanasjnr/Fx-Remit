name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Smart Contract Testing & Security
  smart-contract-tests:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install

    - name: Compile contracts
      run: pnpm hardhat:compile

    - name: Run smart contract tests
      run: pnpm hardhat:test

    - name: Run gas reporting
      run: pnpm --filter @fx-remit/hardhat test --gas-report

    - name: Run coverage
      run: pnpm --filter @fx-remit/hardhat coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./packages/hardhat/coverage.json
        flags: smart-contracts
        name: smart-contract-coverage

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install

    - name: Run linting
      run: pnpm react-app:lint

    - name: Type check
      run: pnpm --filter @fx-remit/react-app tsc --noEmit

    - name: Build frontend
      run: pnpm react-app:build

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install

    - name: Run Slither security analysis
      uses: crytic/slither-action@v0.2.0
      with:
        target: 'packages/hardhat/contracts'
        args: '--print human-summary'

    - name: Run Mythril security analysis
      uses: ConsenSys/mythril-action@v1.0.0
      with:
        target: 'packages/hardhat/contracts/FXRemit.sol'
        args: '--execution-timeout 300'

    - name: Run dependency vulnerability scan
      run: pnpm audit --audit-level moderate

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install

    - name: Run Prettier check
      run: pnpm --filter @fx-remit/hardhat prettier --check 'contracts/**/*.sol' '**/*.ts'

    - name: Run ESLint
      run: pnpm react-app:lint

    - name: Check for TODO comments
      run: |
        if grep -r "TODO\|FIXME\|HACK" packages/ --exclude-dir=node_modules; then
          echo "Found TODO/FIXME/HACK comments. Please address them before merging."
          exit 1
        fi

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [smart-contract-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install

    - name: Start local blockchain
      run: pnpm hardhat:run:node &
      env:
        HARDHAT_NETWORK: localhost

    - name: Wait for blockchain to start
      run: sleep 10

    - name: Deploy contracts to local network
      run: pnpm --filter @fx-remit/hardhat run scripts/deploy.ts --network localhost

    - name: Run integration tests
      run: pnpm --filter @fx-remit/react-app test:integration

  # Deployment (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [smart-contract-tests, frontend-tests, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install

    - name: Build frontend
      run: pnpm react-app:build

    - name: Deploy to Vercel (Frontend)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./packages/react-app

    - name: Deploy contracts to testnet
      run: pnpm --filter @fx-remit/hardhat run scripts/deploy.ts --network alfajores
      env:
        PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
        CELOSCAN_API_KEY: ${{ secrets.CELOSCAN_API_KEY }}

  # Performance Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [smart-contract-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Documentation Check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README links
      run: |
        # Check if all documentation files exist
        test -f README.md
        test -f docs/ARCHITECTURE.md
        test -f docs/SETUP.md
        test -f docs/FAQ.md
        test -f docs/CONTRIBUTING.md
        test -f docs/CODE_OF_CONDUCT.md

    - name: Check for broken links in README
      run: |
        # Extract links from README and check if they're valid
        grep -o 'https://[^)]*' README.md | while read url; do
          if ! curl -s --head "$url" | head -n 1 | grep -q "HTTP/[1-2].[0-9] [23]"; then
            echo "Broken link found: $url"
            exit 1
          fi
        done 